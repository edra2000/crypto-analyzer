* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Cairo', sans-serif;
    background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
    color: #ffffff;
    min-height: 100vh;
    direction: rtl;
}

.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
}

header {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    padding: 20px 0;
    border-bottom: 1px solid #333;
    position: sticky;
    top: 0;
    z-index: 100;
}

header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    background: linear-gradient(45deg, #f39c12, #e74c3c);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

header p {
    font-size: 1.1rem;
    color: #bbb;
}

.filters {
    display: flex;
    gap: 20px;
    align-items: center;
    margin: 30px 0;
    flex-wrap: wrap;
}

.filters select,
.filters input {
    background: #2a2a2a;
    border: 1px solid #444;
    color: #fff;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
}

.filters select:focus,
.filters input:focus {
    outline: none;
    border-color: #f39c12;
    box-shadow: 0 0 0 2px rgba(243, 156, 18, 0.2);
}

.search-box {
    flex: 1;
    max-width: 300px;
}

.status {
    display: flex;
    gap: 15px;
    font-size: 14px;
}

.status span {
    padding: 8px 12px;
    background: #2a2a2a;
    border-radius: 6px;
    border: 1px solid #444;
}

.loading {
    text-align: center;
    padding: 60px 20px;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 4px solid #333;
    border-top: 4px solid #f39c12;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.crypto-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 20px;
    padding-bottom: 40px;
}

.crypto-card {
    background: linear-gradient(145deg, #2a2a2a, #1f1f1f);
    border: 1px solid #333;
    border-radius: 16px;
    padding: 24px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.crypto-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #f39c12, #e74c3c);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.crypto-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
    border-color: #f39c12;
}

.crypto-card:hover::before {
    transform: scaleX(1);
}

.card-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
}

.coin-logo {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(45deg, #f39c12, #e74c3c);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 20px;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.coin-info h3 {
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 5px;
}

.coin-info .symbol {
    color: #888;
    font-size: 0.9rem;
}

.price-section {
    margin-bottom: 20px;
}

.current-price {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 8px;
}

.price-change {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 1rem;
    font-weight: 600;
}

.price-change.positive {
    color: #27ae60;
}

.price-change.negative {
    color: #e74c3c;
}

.arrow {
    font-size: 12px;
}

.stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
}

.stat-item {
    background: rgba(0, 0, 0, 0.3);
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #333;
}

.stat-label {
    font-size: 0.85rem;
    color: #888;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 1rem;
    font-weight: 600;
}

.pattern-section {
    background: rgba(243, 156, 18, 0.1);
    border: 1px solid rgba(243, 156, 18, 0.3);
    border-radius: 10px;
    padding: 15px;
    text-align: center;
}

.pattern-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: #f39c12;
    margin-bottom: 5px;
}

.pattern-confidence {
    font-size: 0.9rem;
    color: #bbb;
}

.no-pattern {
    background: rgba(136, 136, 136, 0.1);
    border-color: rgba(136, 136, 136, 0.3);
}

.no-pattern .pattern-name {
    color: #888;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
}

.modal-content {
    background: linear-gradient(145deg, #2a2a2a, #1f1f1f);
    margin: 5% auto;
    padding: 30px;
    border: 1px solid #333;
    border-radius: 20px;
    width: 90%;
    max-width: 800px;
    max-height: 80vh;
    overflow-y: auto;
    position: relative;
}

.close {
    color: #aaa;
    float: left;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 15px;
    left: 25px;
    cursor: pointer;
    transition: color 0.3s ease;
}

.close:hover {
    color: #f39c12;
}

.pattern-details h2 {
    color: #f39c12;
    margin-bottom: 20px;
    font-size: 2rem;
}

.pattern-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.info-card {
    background: rgba(0, 0, 0, 0.3);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid #333;
}

.info-card h4 {
    color: #f39c12;
    margin-bottom: 10px;
    font-size: 1.1rem;
}

.targets {
    background: rgba(39, 174, 96, 0.1);
    border-color: rgba(39, 174, 96, 0.3);
}

.risks {
    background: rgba(231, 76, 60, 0.1);
    border-color: rgba(231, 76, 60, 0.3);
}

/* Responsive Design */
@media (max-width: 768px) {
    .crypto-grid {
        grid-template-columns: 1fr;
    }
    
    .filters {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-box {
        max-width: none;
    }
    
    header h1 {
        font-size: 2rem;
    }
    
    .modal-content {
        margin: 10% auto;
        padding: 20px;
        width: 95%;
    }
}

@media (max-width: 480px) {
    .container {
        padding: 0 15px;
    }
    
    .crypto-card {
        padding: 20px;
    }
    
    .stats {
        grid-template-columns: 1fr;
    }
}
class PatternDetector {
    constructor() {
        this.patterns = {
            'double-bottom': {
                name: 'القاع الثنائي',
                nameEn: 'Double Bottom',
                type: 'bullish',
                description: 'نموذج انعكاسي صاعد يتكون من قاعين متساويين تقريباً',
                reliability: 85,
                minBars: 20,
                detect: this.detectDoubleBottom.bind(this)
            },
            'triple-top': {
                name: 'القمة الثلاثية',
                nameEn: 'Triple Top',
                type: 'bearish',
                description: 'نموذج انعكاسي هابط يتكون من ثلاث قمم متساوية تقريباً',
                reliability: 80,
                minBars: 25,
                detect: this.detectTripleTop.bind(this)
            },
            'triple-bottom': {
                name: 'القاع الثلاثي',
                nameEn: 'Triple Bottom',
                type: 'bullish',
                description: 'نموذج انعكاسي صاعد يتكون من ثلاثة قيعان متساوية تقريباً',
                reliability: 80,
                minBars: 25,
                detect: this.detectTripleBottom.bind(this)
            },
            'head-shoulders': {
                name: 'الرأس والكتفين',
                nameEn: 'Head & Shoulders',
                type: 'bearish',
                description: 'نموذج انعكاسي هابط يتكون من قمة عالية بين قمتين أقل',
                reliability: 90,
                minBars: 30,
                detect: this.detectHeadAndShoulders.bind(this)
            },
            'inverted-head-shoulders': {
                name: 'الرأس والكتفين المقلوب',
                nameEn: 'Inverted Head & Shoulders',
                type: 'bullish',
                description: 'نموذج انعكاسي صاعد يتكون من قاع منخفض بين قاعين أعلى',
                reliability: 90,
                minBars: 30,
                detect: this.detectInvertedHeadAndShoulders.bind(this)
            },
            'symmetrical-triangle': {
                name: 'المثلث المتماثل',
                nameEn: 'Symmetrical Triangle',
                type: 'continuation',
                description: 'نموذج استمراري يتكون من قمم منخفضة وقيعان مرتفعة',
                reliability: 75,
                minBars: 20,
                detect: this.detectSymmetricalTriangle.bind(this)
            },
            'ascending-triangle': {
                name: 'المثلث الصاعد',
                nameEn: 'Ascending Triangle',
                type: 'bullish',
                description: 'نموذج صاعد يتكون من مقاومة أفقية وقيعان مرتفعة',
                reliability: 80,
                minBars: 15,
                detect: this.detectAscendingTriangle.bind(this)
            },
            'descending-triangle': {
                name: 'المثلث الهابط',
                nameEn: 'Descending Triangle',
                type: 'bearish',
                description: 'نموذج هابط يتكون من دعم أفقي وقمم منخفضة',
                reliability: 80,
                minBars: 15,
                detect: this.detectDescendingTriangle.bind(this)
            },
            'rising-wedge': {
                name: 'الوتد الصاعد',
                nameEn: 'Rising Wedge',
                type: 'bearish',
                description: 'نموذج هابط يتكون من قمم وقيعان مرتفعة مع تضييق المدى',
                reliability: 75,
                minBars: 20,
                detect: this.detectRisingWedge.bind(this)
            },
            'falling-wedge': {
                name: 'الوتد الهابط',
                nameEn: 'Falling Wedge',
                type: 'bullish',
                description: 'نموذج صاعد يتكون من قمم وقيعان منخفضة مع تضييق المدى',
                reliability: 75,
                minBars: 20,
                detect: this.detectFallingWedge.bind(this)
            }
        };
    }
